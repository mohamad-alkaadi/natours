in getTour when we put invalid id the return is 
the output is:

{
    "status": "error",
    "error": {
        "stringValue": "\"wwwwwwwwww\"",
        "valueType": "string",
        "kind": "ObjectId",
        "value": "wwwwwwwwww",
        "path": "_id",
        "reason": {},
        "name": "CastError",
        "message": "Cast to ObjectId failed for value \"wwwwwwwwww\" (type string) at path \"_id\" for model \"Tour\""
    },
    "message": "Cast to ObjectId failed for value \"wwwwwwwwww\" (type string) at path \"_id\" for model \"Tour\"",
    "stack": "CastError: Cast to ObjectId failed for value \"wwwwwwwwww\" (type string) at path \"_id\" for model \"Tour\"\n    at model.Query.exec (D:\\Projects\\Github\\natours\\node_modules\\mongoose\\lib\\query.js:4498:21)\n    at Query.then (D:\\Projects\\Github\\natours\\node_modules\\mongoose\\lib\\query.js:4592:15)"
}


we focus on the name part:
    
    "name": "CastError",

--------------------------------------------
in the updateTour if we enter rating that is larger or smaller than the range specified

the output will be:
{
    "status": "error",
    "error": {
        "errors": {
            "ratingsAverage": {
                "name": "ValidatorError",
                "message": "Rating must be below 5.0",
                "properties": {
                    "message": "Rating must be below 5.0",
                    "type": "max",
                    "max": 5,
                    "path": "ratingsAverage",
                    "value": 7
                },
                "kind": "max",
                "path": "ratingsAverage",
                "value": 7
            }
        },
        "_message": "Validation failed",
        "statusCode": 500,
        "status": "error",
        "name": "ValidationError",
        "message": "Validation failed: ratingsAverage: Rating must be below 5.0"
    },
    "message": "Validation failed: ratingsAverage: Rating must be below 5.0",
    "stack": "ValidationError: Validation failed: ratingsAverage: Rating must be below 5.0\n    at _done (D:\\Projects\\Github\\natours\\node_modules\\mongoose\\lib\\helpers\\updateValidators.js:236:19)\n    at D:\\Projects\\Github\\natours\\node_modules\\mongoose\\lib\\helpers\\updateValidators.js:212:11\n    at schemaPath.doValidate.updateValidator (D:\\Projects\\Github\\natours\\node_modules\\mongoose\\lib\\helpers\\updateValidators.js:170:13)\n    at D:\\Projects\\Github\\natours\\node_modules\\mongoose\\lib\\schematype.js:1273:9\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)"
}

we focus on the name part:

    "name": "ValidatorError",

---------------------------------
in createTour if we inter a dupelacate value for the tour name because we specified it as unique

the output is:
{
    "status": "error",
    "error": {
        "driver": true,
        "name": "MongoError",
        "index": 0,
        "code": 11000,
        "keyPattern": {
            "_id": 1
        },
        "keyValue": {
            "_id": "674060406b3cf8329007cb33"
        },
        "statusCode": 500,
        "status": "error"
    },
    "message": "E11000 duplicate key error collection: natours.tours index: _id_ dup key: { _id: ObjectId('674060406b3cf8329007cb33') }",
    "stack": "MongoError: E11000 duplicate key error collection: natours.tours index: _id_ dup key: { _id: ObjectId('674060406b3cf8329007cb33') }\n    at MongoError.create (D:\\Projects\\Github\\natours\\node_modules\\mongodb\\lib\\core\\error.js:59:12)\n    at toError (D:\\Projects\\Github\\natours\\node_modules\\mongodb\\lib\\utils.js:130:22)\n    at D:\\Projects\\Github\\natours\\node_modules\\mongodb\\lib\\operations\\common_functions.js:258:39\n    at handler (D:\\Projects\\Github\\natours\\node_modules\\mongodb\\lib\\core\\topologies\\replset.js:1211:22)\n    at D:\\Projects\\Github\\natours\\node_modules\\mongodb\\lib\\core\\connection\\pool.js:407:18\n    at process.processTicksAndRejections (node:internal/process/task_queues:77:11)"
}


we focus on the name part:
    "name": "MongoError",


-----------------------------
these errors we are going to mark them as operational

---------------------------------------------
to start production install this package
npm install cross-env --save-dev

and add this to package.json:

    "start:prod": "cross-env NODE_ENV=production nodemon server.js",
